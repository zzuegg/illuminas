#import "Shaders/Illuminas/ShaderLib/GBuffer.glsllib"
layout (triangles, equal_spacing, cw) in;
uniform mat3 g_WorldMatrix;
uniform mat4 g_ViewProjectionMatrix;
uniform mat4 m_ShadowViewProjectionMatrix;
uniform vec2 g_Resolution;
uniform sampler2D m_ShadowMap;
in vec3 lightPositionX[];
in vec3 lightDirectionX[];
in vec3 lightColorX[];
in vec2 lightAnglesX[];
in float lightRadiusX[];
in float lightAngularFallofFactorX[];
in vec3 worldPositionX[];
in vec2 texCoordsX[];
in float vertTypeX[];
out vec3 lightColor;
out vec2 texCoords;
out vec3 worldPosition;
float linearize_depth(float d,float zNear,float zFar)
{
    float z_n = 2.0 * d - 1.0;
    return 2.0 * zNear * zFar / (zFar + zNear - z_n * (zFar - zNear));
}

void main(){
    lightColor=lightColorX[0];

    //    fragTexCoord=gl_FragCoord.xy/g_Resolution;
    //    vec3 depthPosition=decodeWorldPosition(g_ViewProjectionMatrixInverse, texture(m_Depth, fragTexCoord).x, fragTexCoord);
    texCoords=texCoordsX[0]*gl_TessCoord.x+ texCoordsX[1]*gl_TessCoord.y+ texCoordsX[2]*gl_TessCoord.z;
    float vertType=vertTypeX[0]*gl_TessCoord.x+ vertTypeX[1]*gl_TessCoord.y+ vertTypeX[2]*gl_TessCoord.z;
    vec3 tePosition = vec3(gl_TessCoord.x)*gl_in[0].gl_Position.xyz+vec3(gl_TessCoord.y)*gl_in[1].gl_Position.xyz+vec3(gl_TessCoord.z)*gl_in[2].gl_Position.xyz;
    worldPosition=tePosition;
    vec4 shadowCoordinates=(m_ShadowViewProjectionMatrix*vec4(worldPosition, 1.0));
    shadowCoordinates = vec4(((shadowCoordinates.xyz/shadowCoordinates.w)+1.0)/2.0, shadowCoordinates.w);
    vec2 moments = texture2D(m_ShadowMap, shadowCoordinates.xy).xy;
    vec3 direction=normalize(worldPosition-lightPositionX[0]);
    float depth=linearize_depth(moments.x,0.1f,lightRadiusX[0]);
    if(vertType==0){
        worldPosition=lightPositionX[0];
        gl_Position = g_ViewProjectionMatrix*vec4(worldPosition, 1.0);
        texCoords=gl_Position.xy;
    }else {
        worldPosition=lightPositionX[0]+(direction*depth*min(vertType,1));
        gl_Position = g_ViewProjectionMatrix*vec4(worldPosition, 1.0);
        texCoords=gl_Position.xy;
    }
}