layout(vertices=3) out;
out gl_PerVertex{
    vec4 gl_Position;
}gl_out[];
out vec3 lightPositionX[];
out vec3 lightDirectionX[];
out vec3 lightColorX[];
out vec2 lightAnglesX[];
out float lightRadiusX[];
out float lightAngularFallofFactorX[];
out vec3 worldPositionX[];
out vec2 texCoordsX[];
out float vertTypeX[];
in vec3 lightPosition[];
in vec3 lightDirection[];
in vec3 lightColor[];
in vec2 lightAngles[];
in float lightRadius[];
in float lightAngularFallofFactor[];
in vec3 worldPosition[];
in vec2 texCoords[];
in float vertType[];

int m_TessellationFactor;
void main(){
    m_TessellationFactor=64;

    if (gl_InvocationID == 0){

        float f_TessellationFactor=float(m_TessellationFactor);

        gl_TessLevelOuter[0]=f_TessellationFactor;
        gl_TessLevelOuter[1]=f_TessellationFactor;
        gl_TessLevelOuter[2]=f_TessellationFactor;
        gl_TessLevelInner[0]=f_TessellationFactor;
    }
    vertTypeX[gl_InvocationID]=vertType[gl_InvocationID];
    lightPositionX[gl_InvocationID]=lightPosition[gl_InvocationID];
    lightDirectionX[gl_InvocationID]=lightDirection[gl_InvocationID];
    lightColorX[gl_InvocationID]=lightColor[gl_InvocationID];
    lightAnglesX[gl_InvocationID]=lightAngles[gl_InvocationID];
    lightRadiusX[gl_InvocationID]=lightRadius[gl_InvocationID];
    lightAngularFallofFactorX[gl_InvocationID]=lightAngularFallofFactor[gl_InvocationID];
    worldPositionX[gl_InvocationID]=worldPosition[gl_InvocationID];
    texCoordsX[gl_InvocationID]=texCoords[gl_InvocationID];
    gl_out[gl_InvocationID].gl_Position = gl_in[gl_InvocationID].gl_Position;
}