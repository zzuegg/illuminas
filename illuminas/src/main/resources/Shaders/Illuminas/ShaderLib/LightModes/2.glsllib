uniform sampler2D m_NormalDepth;
uniform sampler2D m_BaseColor;
uniform sampler2D m_MetallicRoughness;
uniform sampler2D m_Depth;

vec3 F_Shlick(float vh,	vec3 F0){
    float fresnelFact = pow(2.0, (-5.55473*vh - 6.98316) * vh);
    return mix(F0, vec3(1.0, 1.0, 1.0), fresnelFact);
}

vec3 computeFinalColor(in vec3 lightColor,in vec3 lightDirection,in vec3 worldNormal,in vec3 viewDirection, in vec2 gbufferTexCoords, in vec2 lightingFactors, in float angularFallOff, in float linearFallOff){
    vec3 baseColor=texture(m_BaseColor, gbufferTexCoords).xyz;
    vec4 metallicRoughness=texture(m_MetallicRoughness, gbufferTexCoords);
    float metallic=max(metallicRoughness.x,0);
    float roughness=max(metallicRoughness.y,1e-4);

    float specular = 0.5;
    float nonMetalSpec = 0.08 * specular;
    vec3 specularColor = (nonMetalSpec - nonMetalSpec * metallic) + baseColor * metallic;
    vec3 diffuseColor = baseColor - baseColor * metallic;
    vec3 fZero = vec3(specular);

    vec3 halfVec = normalize(lightDirection + viewDirection);
    float ndotv = max( dot(worldNormal, viewDirection ),0.0);
    float ndotl = max( dot(worldNormal,   lightDirection), 0.0);
    float ndoth = max( dot(worldNormal,   halfVec),  0.0);
    float hdotv = max( dot(viewDirection,  halfVec),  0.0);

    vec3 diffuseLight = vec3(ndotl) * lightColor;

    //cook-torrence, microfacet BRDF : http://blog.selfshadow.com/publications/s2013-shading-course/karis/s2013_pbs_epic_notes_v2.pdf
    float alpha = roughness * roughness;
    //D, GGX normal Distribution function
    float alpha2 = alpha * alpha;
    float sum  = ((ndoth * ndoth) * (alpha2 - 1.0) + 1.0);
    float denom = PI * sum * sum;
    float D = alpha2 / denom;

    // Compute Fresnel function via Schlick's approximation.
    vec3 fresnel = F_Shlick(hdotv, fZero);
    //G Schlick GGX Geometry shadowing term,  k = alpha/2
    float k = alpha * 0.5;
    // UE4 way to optimise Schlick GGX Geometry shadowing term
    //http://graphicrants.blogspot.co.uk/2013/08/specular-brdf-reference.html
    float G_V = ndotv + sqrt( (ndotv - ndotv * k) * ndotv + k );
    float G_L = ndotl + sqrt( (ndotl - ndotl * k) * ndotl + k );
    // the max here is to avoid division by 0 that may cause some small glitches.
    float G = 1.0/max( G_V * G_L ,0.01);
    float specular2 = D * G * ndotl;
    //specular2=min(specular2,1);
    vec3 specularLight = vec3(specular2) * fresnel * lightColor;

    vec3 directLighting=(diffuseColor*diffuseLight+specularLight)*linearFallOff*angularFallOff;

    return directLighting;
}