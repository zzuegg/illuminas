uniform sampler2D m_NormalDepth;
uniform sampler2D m_AlbedoSpecular;
uniform sampler2D m_Depth;

const float kPi = 3.14159265;
const float kShininess = 16.0;
const float kEnergyConservation = ( 8.0 + kShininess ) / ( 8.0 * kPi );

void computeLighting(in vec3 worldNormal, in vec3 lightDirection, in vec3 viewDirection, out vec2 diffuseSpecularFactor){
  vec3 halfwayDirection = normalize( lightDirection + viewDirection );
  float specular = kEnergyConservation * pow( max( dot( worldNormal, halfwayDirection ) , 0.0), kShininess);
  float diffuse = max( dot( worldNormal, lightDirection ), 0.0);
  diffuseSpecularFactor = vec2( diffuse, specular );
}